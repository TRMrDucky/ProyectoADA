/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;

import Algoritmos.AlgoritmosBusqueda;
import Algoritmos.AlgoritmosMST;
import Algoritmos.BellmanFord;
import Algoritmos.MapaCiudades;
import Grafos.Arista;
import Grafos.Grafo;
import Grafos.Vertice;
import java.awt.BorderLayout;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author 52644
 */
public class Presentacion extends javax.swing.JFrame {

    private static MapaPanel mp;
    private AlgoritmosBusqueda algoritmos = new AlgoritmosBusqueda();

    public Presentacion() {
        initComponents();
        mostrarMapa();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMapa = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        BntReiniciar = new javax.swing.JButton();
        btnBoruvka = new javax.swing.JButton();
        BtnDijkstra = new javax.swing.JButton();
        BtnDFS = new javax.swing.JButton();
        BtnBFS = new javax.swing.JButton();
        BtnBellmanFord = new javax.swing.JButton();
        btnKruskal = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelMapaLayout = new javax.swing.GroupLayout(panelMapa);
        panelMapa.setLayout(panelMapaLayout);
        panelMapaLayout.setHorizontalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelMapaLayout.setVerticalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        btnSalir.setBackground(new java.awt.Color(204, 0, 51));
        btnSalir.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(0, 0, 0));
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        BntReiniciar.setBackground(new java.awt.Color(0, 102, 102));
        BntReiniciar.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        BntReiniciar.setForeground(new java.awt.Color(255, 255, 255));
        BntReiniciar.setText("Reiniciar mapa");
        BntReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BntReiniciarActionPerformed(evt);
            }
        });

        btnBoruvka.setBackground(new java.awt.Color(0, 102, 102));
        btnBoruvka.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        btnBoruvka.setForeground(new java.awt.Color(255, 255, 255));
        btnBoruvka.setText("Boruvka");
        btnBoruvka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoruvkaActionPerformed(evt);
            }
        });

        BtnDijkstra.setBackground(new java.awt.Color(0, 102, 102));
        BtnDijkstra.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        BtnDijkstra.setForeground(new java.awt.Color(255, 255, 255));
        BtnDijkstra.setText("Dijkstra");
        BtnDijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDijkstraActionPerformed(evt);
            }
        });

        BtnDFS.setBackground(new java.awt.Color(0, 102, 102));
        BtnDFS.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        BtnDFS.setForeground(new java.awt.Color(255, 255, 255));
        BtnDFS.setText("DFS");
        BtnDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDFSActionPerformed(evt);
            }
        });

        BtnBFS.setBackground(new java.awt.Color(0, 102, 102));
        BtnBFS.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        BtnBFS.setForeground(new java.awt.Color(255, 255, 255));
        BtnBFS.setText("BFS");
        BtnBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBFSActionPerformed(evt);
            }
        });

        BtnBellmanFord.setBackground(new java.awt.Color(0, 102, 102));
        BtnBellmanFord.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        BtnBellmanFord.setForeground(new java.awt.Color(255, 255, 255));
        BtnBellmanFord.setText("Bellman ford");
        BtnBellmanFord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBellmanFordActionPerformed(evt);
            }
        });

        btnKruskal.setBackground(new java.awt.Color(0, 102, 102));
        btnKruskal.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        btnKruskal.setForeground(new java.awt.Color(255, 255, 255));
        btnKruskal.setText("Kruskal");
        btnKruskal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKruskalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnKruskal, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(BtnBellmanFord, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(BtnBFS, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(BtnDFS, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnBoruvka, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnDijkstra, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BntReiniciar)
                .addGap(38, 38, 38)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBoruvka, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnDijkstra, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnDFS, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BtnBFS, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BtnBellmanFord, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnKruskal, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BntReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre de la Ciudad", "Cordenadas"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("TABLA DE NODOS");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1)))
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKruskalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKruskalActionPerformed
        Grafo g = Algoritmos.AlgoritmosMST.aplicarKruskal(mp.getGrafo());
        try {
            mp.actualizarGrafo(g);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnKruskalActionPerformed
    private double obtenerPesoArista(Grafo grafo, Vertice origen, Vertice destino) {

        for (Arista arista : grafo.getVecinos(origen)) {
            if (arista.getDestino().equals(destino)) {
                return arista.getPeso();
            }
        }

        for (Arista arista : grafo.getVecinos(destino)) {
            if (arista.getDestino().equals(origen)) {
                return arista.getPeso();
            }
        }
        return 0.0;
    }
    private void BtnBellmanFordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBellmanFordActionPerformed

        String origenNombre = JOptionPane.showInputDialog(this, "Ingrese la ciudad de origen:");
        if (origenNombre == null || origenNombre.trim().isEmpty()) {
            return;
        }

        String destinoNombre = JOptionPane.showInputDialog(this, "Ingrese la ciudad de destino:");
        if (destinoNombre == null || destinoNombre.trim().isEmpty()) {
            return;
        }

        Grafo grafoOriginal = mp.getGrafo();
        Vertice origen = null;
        Vertice destino = null;

        for (Vertice v : grafoOriginal.getVertices()) {
            if (v.getNombre().equalsIgnoreCase(origenNombre.trim())) {
                origen = v;
            }
            if (v.getNombre().equalsIgnoreCase(destinoNombre.trim())) {
                destino = v;
            }
        }

        if (origen == null || destino == null) {
            JOptionPane.showMessageDialog(this, "Una o ambas ciudades no se encontraron en el grafo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (origen.equals(destino)) {
            JOptionPane.showMessageDialog(this, "La ciudad de origen y destino no pueden ser la misma.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Map<String, Object> resultado = BellmanFord.BellmanFord(grafoOriginal, origen, destino);

        if ((Boolean) resultado.get("ciclo negativo")) {
            JOptionPane.showMessageDialog(this, "Se detecto un ciclo de peso negativo. No se puede calcular la ruta más corta.", "Ciclo Negativo Detectado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        List<Vertice> ruta = (List<Vertice>) resultado.get("ruta");
        if (ruta == null || ruta.size() < 2) {
            JOptionPane.showMessageDialog(this, "No se encontro una ruta entre las ciudades seleccionadas.", "Sin Ruta", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Grafo grafoRuta = new Grafo();
        ruta.forEach(grafoRuta::agregarVertice);

        for (int i = 0; i < ruta.size() - 1; i++) {
            Vertice u = ruta.get(i);
            Vertice v = ruta.get(i + 1);
            double peso = obtenerPesoArista(grafoOriginal, u, v);
            grafoRuta.agregarArista(u, v, peso);
        }

        try {
            mp.actualizarGrafo(grafoRuta);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_BtnBellmanFordActionPerformed

    private void BtnBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBFSActionPerformed
        Vertice origen = mp.getVerticeSeleccionado();
        if (origen == null) {
            JOptionPane.showMessageDialog(this, "Selecciona un vertice origen");
            return;
        }
        Grafo g = algoritmos.BFS(mp.getGrafo(), origen);
        try {
            mp.actualizarGrafo(g);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BtnBFSActionPerformed

    private void BtnDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDFSActionPerformed
        Vertice origen = mp.getVerticeSeleccionado();
        if (origen == null) {
            JOptionPane.showMessageDialog(this, "Selecciona un vertice origen");
            return;
        }
        Grafo g = algoritmos.DFS(mp.getGrafo(), origen);
        try {
            mp.actualizarGrafo(g);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BtnDFSActionPerformed

    private void BtnDijkstraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDijkstraActionPerformed
        Vertice origen = mp.getVerticeSeleccionado();
        if (origen == null) {
            JOptionPane.showMessageDialog(this, "Selecciona un vertice origen");
            return;
        }
        Grafo g = algoritmos.Dijkstra(mp.getGrafo(), origen);
        try {
            mp.actualizarGrafo(g);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BtnDijkstraActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBoruvkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoruvkaActionPerformed
        try {
            Grafo grafoOriginal = mp.getGrafo();
            Grafo mst = AlgoritmosMST.aplicarBoruvka(grafoOriginal);
            mp.actualizarGrafo(mst);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBoruvkaActionPerformed
    
    private void BntReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BntReiniciarActionPerformed
        Grafo grafoOriginal = MapaCiudades.construirGrafo();
        try {
            mp.actualizarGrafo(grafoOriginal);
        } catch (InterruptedException ex) {
            Logger.getLogger(Presentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BntReiniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Presentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Presentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Presentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Presentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Presentacion().setVisible(true);
            }
        });
    }

    private void mostrarMapa() {
        Grafo grafoCiudades = MapaCiudades.construirGrafo();

        MapaPanel mapaPanel = new MapaPanel(grafoCiudades);
        this.mp = mapaPanel;
        panelMapa.setLayout(new BorderLayout());
        panelMapa.add(mapaPanel, BorderLayout.CENTER);

        mapaPanel.setSize(panelMapa.getSize());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BntReiniciar;
    private javax.swing.JButton BtnBFS;
    private javax.swing.JButton BtnBellmanFord;
    private javax.swing.JButton BtnDFS;
    private javax.swing.JButton BtnDijkstra;
    private javax.swing.JButton btnBoruvka;
    private javax.swing.JButton btnKruskal;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panelMapa;
    // End of variables declaration//GEN-END:variables
}
